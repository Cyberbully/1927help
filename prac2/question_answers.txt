Selection:
- consistently O(n^2) for all data
- does the same amount of swaps on all data

Bubble:
- consistently O(n^2) - except when not naive - then can be fast on ordered
- if comparing between this and selection, consider the amount of instructions needed to execute between itself and selection

Insertion:
- O(n^2) worst (much worst for reversed), o(n) for ordered (very nicely)

MergeSort;
- O(nlogn), no questions asked

Quicksort:
- O(nlogn) average, slow for ordered/reverse for naive, consisteny for median of three

=====

void appendToList(List original, link add) {
    original->first = append(original->first); // you should've done append in other prac exam    
}

List partition(List original, int data) {
    List greaterThan = newList(); // code newList
    int i;
    link prev = NULL;
    link curr = original->first;
    while (curr != NULL) {
        if (curr->data >= data) {
            // isolate curr node
            if (prev == NULL) {
                // empty array
                original->first = original->first->next; // change the first node
            } else {
                prev->next = curr->next;
            }
            // change first as necessary
            if (greaterThan->first == NULL) {
                greaterThan->first = curr;
                greaterThan->last = curr;
            } else {
                greaterThan->last->next = curr;
            }
            greaterThan->last = curr;
            greaterThan->size++;
            original->size--;
        } else {
            prev = curr; // only update prev if its not partioned
        }
        curr = curr->next;
    }
    // make sure original last is right
    original->last = prev;
    return greaterThan;
}


=====
 
// matrix
int hasEulerCircuit(Graph g) {
    int i, j;
    for (i = 0; i < g->nV; i++) {
        int count = 0;
        for (j = 0; j < g->nV; j++) {
            if (g->[i][j] != NO_EDGE) {
                count++;
            }
        }
        if (count % 2 != 0) {
            return 0; // cannot have euler circuit if edges are not even
        }
    }
    return 1;
}

int canReach(Graph g, int i, int j) {
    return (g->adj[i][j] != NO_EDGE);
}

int getDegrees(Graph g, int j) {
    int i, count = 0;
    for (i = 0; i < g->nV; i++) {
        if (g->adj[j][i] != NO_EDGE) {
            count++;
        }
    }    
    return count;
}

// adjacency list
int hasEulerCircuit(Graph g) {
    int i;
    for (i = 0; i < g->nV; i++) {
        int count = 0;
        link curr;
        for (curr = g->adj[i]; curr != NULL; curr = curr->next) {
            count++;
        }
        if (count % 2 != 0) {
            return 0; // cannot have euler circuit if edges are not even
        }
    }
    return 1;
}


int canReach(Graph g, int i, int j) {
    link curr;
    for (curr = g->adj[i]; curr != NULL; curr = curr->next) {
        if (curr->v == j) {
            return 1;
        }
    }
    return 0;
}

int getDegrees(Graph g, int j) {
    link curr, count = 0;
    for (curr = g->adj[j]; curr != NULL; curr = curr->next) {
        count++;
    }
    return count
}

=======

// something like this:
// in dfsSearch:
for (i = 0; i < g->nV; i++) {
    printPathTo(g, i);
}

// then:
void printPathTo(Graph g, int end) {
    int *a = malloc(sizeof(int) * g->nV);
    int count = 0;
    int currentLocation = end;
    while (currentLocation != -1) { // assuming st end is -1
        a[count++] = currentLocation;
        currentLocation = st[currentLocation]; // remember st array is global
    }
    // print the reverse of the array
    for (count -= 1; count > 0; count--) { 
        printf("%d-%d ", a[count], a[count-1]); // note do not use --.
    }
    free(a);
    printf("\n");
}
